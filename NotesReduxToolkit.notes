
# BASICS OF REDUX:

1. it is for JS Applications.
2. it is not tied to react. It can be used with Angular, VueJs
3. Redux is a state container. 

# State -  state that is shared by all the individual components of the app.  

4. Redux is a predictable state container of JS apps.
# Tools and patterns provided by redux makes it easier to understand when, where, why and how state of the application is being updated
# and how the application will behave when those changes occur. 

What is Redux Toolkit? :
Official toolset for redux development. It is absraction over redux. 

React-Redux is the official UI binding library of react. 

# When to use Redux in React Application?
It is useful when:
    1.  there is large amout of application state. 
    2.  app state is changed frequently over time
    3.  logic to update that state may be complex.  

!! Three Code concepts of REDUX:
    # 1. [ Store ]: It holds the state of your application. 
    # 2. [ Action ]: It tells us what happened in the application.
    # 3. [ Reducer ]: It handles the Action and describes how to update the state. 

!! Three Principles of Redux:

    #1. The global state of your application is stored as an object inside a single store. 
    #2. The only way to change the state is to dispatch an action, an object which tells/describes what happened.
         --> to update the state, you have to let redux know about that with an action. 
        --> you cannot update the state directly.
    #3. To specify how to update the state tree with an action, write pure reducers. 
        --> pure reducers are functions that take in previousState and action as parameters and return the new state.

# Action:
1. The only way your application can interact with the store. 
2. The application can send some info through action in the store. 
3. These are PLAIN JS OBJECTS. 
4. It must specify a 'type' property to describes something happened in the application.
5. The 'type' property is generally defined as a string constant


#Reducer:
1. Sepcify how the application's state changes in response to actions sent to the store.
2. is a function that accepts state and action as arguments, and returns the next state of the application.
(previousState, action) => newState


# Store:
1. Holds application state
2. allows access to state via getState() 

#HOW EVERYTHING WORKS:
Step 1. Define an action type //(type is generally a string constant).
Step 2. Create an action creator. We send the payload in action creator function as argument. //action creator - a function that returns the object. 
Step 3. We create a reducer which takes previousState and action as parameters. State is changed inside this function
 after conditons are checked on the action.
Step 4. While changing the state, remember to use the spread operator so that all the other contents of state are also returned. Reducer function returns a new state. 